version: "3.8"

services:
  backend:
    image: ${FRAPPE_IMAGE:-custom-frappe:latest}
    restart: unless-stopped
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    depends_on:
      - db
      - redis-cache
      - redis-queue
    environment:
      - FRAPPE_SITE_NAME_HEADER=${SITE_NAME:-frontend}

  configurator:
    image: ${FRAPPE_IMAGE:-custom-frappe:latest}
    restart: "no"
    entrypoint:
      - bash
      - -c
    command:
      - >
        ls -1 apps > sites/apps.txt;
        bench set-config -g db_host $$DB_HOST;
        bench set-config -gp db_port $$DB_PORT;
        bench set-config -g redis_cache "redis://$$REDIS_CACHE";
        bench set-config -g redis_queue "redis://$$REDIS_QUEUE";
        bench set-config -g redis_socketio "redis://$$REDIS_QUEUE";
        bench set-config -gp socketio_port $$SOCKETIO_PORT;
    environment:
      DB_HOST: db
      DB_PORT: "3306"
      REDIS_CACHE: redis-cache:6379
      REDIS_QUEUE: redis-queue:6379
      SOCKETIO_PORT: "9000"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    depends_on:
      - db
      - redis-cache
      - redis-queue

  create-site:
    image: ${FRAPPE_IMAGE:-custom-frappe:latest}
    restart: "no"
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    entrypoint:
      - bash
      - -c
    command:
      - >
        wait-for-it -t 120 db:3306;
        wait-for-it -t 120 redis-cache:6379;
        wait-for-it -t 120 redis-queue:6379;
        echo $${DB_PASSWORD};
        export start=`date +%s`;
        until [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".db_host // empty"` ]] && 
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_cache // empty"` ]] && 
          [[ -n `grep -hs ^ sites/common_site_config.json | jq -r ".redis_queue // empty"` ]];
        do
          echo "Waiting for sites/common_site_config.json to be created";
          sleep 5;
          if (( `date +%s`-start > 120 )); then
            echo "Could not find sites/common_site_config.json with required keys";
            exit 1;
          fi;
        done;
        echo "sites/common_site_config.json found";
        if [ ! -d "sites/$${SITE_NAME}" ]; then
          echo "Creating site: $${SITE_NAME}";
          bench new-site $${SITE_NAME} \
            --mariadb-user-host-login-scope='%' \
            --admin-password=$${ADMIN_PASSWORD} \
            --db-password=$${DB_PASSWORD} \
            --db-name=$${DB_NAME} \
            --db-root-password=$${DB_ROOT_PASSWORD} \
            --set-default;
          # Install apps found in apps directory
          for app_dir in apps/*/; do
            if [ -d "$${app_dir}" ]; then
              app_name=$$(basename "$${app_dir}");
                echo "Installing app: $${app_name}";
                bench --site $${SITE_NAME} install-app "$${app_name}" || echo "Failed to install $${app_name}, continuing...";
            fi;
          done;
        else
          echo "Site $${SITE_NAME} already exists, skipping creation";
        fi;
        echo "Rebuild dependecies";
        bench --site $${SITE_NAME} build;
        echo "migrating";
        bench --site $${SITE_NAME} migrate;
        echo "restart services";
        bench restart;
    environment:
      SITE_NAME: ${SITE_NAME:-frontend}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD:-admin}
      DB_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-admin}
      DB_PASSWORD: ${DB_PASSWORD:-admin}
      DB_NAME: ${DB_NAME:-frappe}
    depends_on:
      - configurator

  db:
    image: mariadb:11.2
    restart: unless-stopped
    healthcheck:
      test: mysqladmin ping -h localhost --password=${MYSQL_ROOT_PASSWORD:-admin}
      interval: 5s
      retries: 30
      start_period: 30s
      timeout: 10s
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --skip-character-set-client-handshake
      - --skip-innodb-read-only-compressed
      - --innodb-buffer-pool-size=256M
      - --max-connections=200
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-admin}
    volumes:
      - ${DB_LOCAL_PATH:-db-data}:/var/lib/mysql

  frontend:
    image: ${FRAPPE_IMAGE:-custom-frappe:latest}
    restart: unless-stopped
    command: nginx-entrypoint.sh
    environment:
      BACKEND: backend:8000
      FRAPPE_SITE_NAME_HEADER: ${SITE_NAME:-frontend}
      SOCKETIO: websocket:9000
      UPSTREAM_REAL_IP_ADDRESS: 127.0.0.1
      UPSTREAM_REAL_IP_HEADER: X-Forwarded-For
      UPSTREAM_REAL_IP_RECURSIVE: "off"
      PROXY_READ_TIMEOUT: 120
      CLIENT_MAX_BODY_SIZE: 50m
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    ports:
      - "${HTTP_PORT:-8080}:8080"
    depends_on:
      - backend
      - websocket

  queue-long:
    image: ${FRAPPE_IMAGE:-custom-frappe:latest}
    restart: unless-stopped
    command:
      - bench
      - worker
      - --queue
      - long,default,short
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    depends_on:
      - backend

  queue-short:
    image: ${FRAPPE_IMAGE:-custom-frappe:latest}
    restart: unless-stopped
    command:
      - bench
      - worker
      - --queue
      - short,default
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    depends_on:
      - backend

  redis-queue:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis-queue-data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  redis-cache:
    image: redis:7-alpine
    restart: unless-stopped
    volumes:
      - redis-cache-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  scheduler:
    image: ${FRAPPE_IMAGE:-custom-frappe:latest}
    restart: unless-stopped
    command:
      - bench
      - schedule
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    depends_on:
      - backend

  websocket:
    image: ${FRAPPE_IMAGE:-custom-frappe:latest}
    restart: unless-stopped
    command:
      - node
      - /home/frappe/frappe-bench/apps/frappe/socketio.js
    volumes:
      - sites:/home/frappe/frappe-bench/sites
      - logs:/home/frappe/frappe-bench/logs
    depends_on:
      - backend

  # Optional: Adminer for database management
  adminer:
    image: adminer:latest
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    profiles:
      - admin

  # Optional: Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: "cache:redis-cache:6379:0,queue:redis-queue:6379:0"
    depends_on:
      - redis-cache
      - redis-queue
    profiles:
      - admin

volumes:
  db-data:
  redis-queue-data:
  redis-cache-data:
  sites:
  logs:

networks:
  default:
    name: frappe-network